name: EKS CI/CD Pipeline

on:
  push:
    # Trigger on push to the main branch
    branches: [ main ]
  pull_request:
    # Trigger on pull request targeting the main branch
    branches: [ main ]

env:
  # AWS and ECR configuration
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  # EKS configuration
  KUBE_CLUSTER_NAME: ${{ secrets.KUBE_CLUSTER_NAME }}
  KUBE_DEPLOYMENT_NAME: recallrisk-deployment # Name of your Kubernetes Deployment
  KUBE_CONTAINER_NAME: recallrisk-api             # Container name in the Deployment

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get commit SHA as unique tag
        id: set_tag
        run: |
          # Use the first 7 characters of the commit SHA as the unique image tag
          echo "IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # --- CI: Build & Test Stage (Example) ---
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Add Unit Tests step here if applicable:
      # - name: Run Unit Tests
      #   run: python -m unittest discover

      # --- CD: Containerization & Push Stage ---
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          FULL_IMAGE_NAME=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "FULL_IMAGE_NAME=$FULL_IMAGE_NAME" >> $GITHUB_ENV
          # 1. Build using the unique commit SHA tag
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .

      - name: Run Local Smoke Test
        # This step creates the container 'recallrisk-api' for cleanup later
        run: |
          echo "Starting local smoke test on container 'recallrisk-api'..."
          docker run -d --name recallrisk-api $ECR_REPOSITORY:$IMAGE_TAG
          sleep 5 # Give the container a moment to start
        
      - name: Robust Container Cleanup
        # This step uses 'if: always()' and '|| true' to guarantee success 
        # and resolve the 'unable to find container' error.
        if: always()
        run: |
          echo "Performing robust cleanup of container 'recallrisk-api'..."
          # Stop the container, ignore error if it's already stopped
          docker stop recallrisk-api || true
          # Remove the container, ignore error if it's already removed
          docker rm recallrisk-api || true
          echo "Cleanup complete."

      - name: Tag and Push Docker Image
        run: |
          # 3. Tag with the full ECR path
          docker tag $ECR_REPOSITORY:$IMAGE_TAG ${{ env.FULL_IMAGE_NAME }}
          # 4. Push the uniquely tagged image to ECR
          docker push ${{ env.FULL_IMAGE_NAME }}

      # --- CD: Deployment Stage to EKS ---
      - name: Update Kubeconfig
        run: aws eks update-kubeconfig --name $KUBE_CLUSTER_NAME --region $AWS_REGION

      - name: Deploy new image to EKS
        run: |
          FULL_IMAGE_NAME=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # Update the deployment image
          kubectl set image deployment/$KUBE_DEPLOYMENT_NAME $KUBE_CONTAINER_NAME=$FULL_IMAGE_NAME
          
          echo "Deployment update initiated. Waiting for rollout (max 10m)..."
          # Wait for the rollout to complete before finishing the workflow
          kubectl rollout status deployment/$KUBE_DEPLOYMENT_NAME --timeout=10m
