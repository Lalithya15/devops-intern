name: CI/CD Pipeline to AWS ECR and EKS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Define environment variables used throughout the workflow
env:
  AWS_REGION: ${{ secrets.AWS_REGION }}          # e.g., us-east-1
  ECR_REPOSITORY: your-app-name-repo            # Must match your ECR repository name
  IMAGE_TAG: ${{ github.sha }}                  # Use the commit SHA as the image tag

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    
    # Define environment variables specific to this job
    env:
      ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # -------------------------------------------------------------
      # AWS Authentication & Configuration
      # -------------------------------------------------------------
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # -------------------------------------------------------------
      # Docker Build & Test
      # -------------------------------------------------------------
      - name: Build Docker image
        run: |
          FULL_IMAGE_NAME=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker build -t $FULL_IMAGE_NAME .
          echo "FULL_IMAGE_NAME=$FULL_IMAGE_NAME" >> $GITHUB_ENV

      - name: Run temporary container for quick test (Optional, for example)
        run: |
          docker run -d --name recallrisk ${{ env.FULL_IMAGE_NAME }}
          sleep 5 # Wait for app to start

      - name: **Fix for 'unable to find container' error**
        run: |
          echo "Cleaning up temporary Docker container."
          # The '|| true' ensures the step passes even if the container is already gone (e.g., it crashed or exited)
          docker stop recallrisk || true
          docker rm recallrisk || true
          echo "Container cleanup complete."

      # -------------------------------------------------------------
      # ECR Push
      # -------------------------------------------------------------
      - name: Log in to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Push Docker image to ECR
        run: |
          docker tag ${{ env.FULL_IMAGE_NAME }} ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
          docker push ${{ env.FULL_IMAGE_NAME }}
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
          
      # -------------------------------------------------------------
      # EKS Deployment (Update Deployment)
      # -------------------------------------------------------------
      - name: Configure kubeconfig for EKS cluster
        uses: aws-actions/amazon-eks-configure-kubeconfig@v3
        with:
          cluster-name: your-eks-cluster-name # **CHANGE THIS**
          role-arn: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/your-eks-deploy-role # **CHANGE THIS (Use an IAM Role if possible)**
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to EKS
        run: |
          # Use kubectl to update your deployment with the new image tag
          kubectl set image deployment/your-deployment-name your-container-name=${{ env.FULL_IMAGE_NAME }} -n your-namespace # **CHANGE THESE**
          kubectl rollout status deployment/your-deployment-name -n your-namespace
